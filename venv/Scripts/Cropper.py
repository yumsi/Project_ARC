"""
Script splices appropriate parts out of complete screenshots generated by the Bot.py. Then generates grids from available images.
Author: Bram LÃ¶bker
Version: 1.0.0 (07-14-2021)
"""

import glob
from PIL import Image
from math import ceil
import os, shutil


def main():
    """"
    Empties all the directories to avoid contamination from earlier sessions.
    Then iterates over all the files and then calls functions to splice out the appropriate parts.
    Then calls functions to generate grids.
    """

    empty_def("Dataset\\Cito_voor\\Duo")
    empty_def("Dataset\\Cito_achter\\Duo")
    empty_def("Dataset\\Mito_voor\\Duo")
    empty_def("Dataset\\Mito_achter\\Duo")
    empty_def("Dataset\\Cito_voor\\RatioDifference")
    empty_def("Dataset\\Cito_achter\\RatioDifference")
    empty_def("Dataset\\Mito_voor\\RatioDifference")
    empty_def("Dataset\\Mito_achter\\RatioDifference")

    empty_def("Dataset\\Cito_voor\\Tumor")
    empty_def("Dataset\\Cito_achter\\Tumor")
    empty_def("Dataset\\Mito_voor\\Tumor")
    empty_def("Dataset\\Mito_achter\\Tumor")
    empty_def("Dataset\\Cito_voor\\Normal")
    empty_def("Dataset\\Cito_achter\\Normal")
    empty_def("Dataset\\Mito_voor\\Normal")
    empty_def("Dataset\\Mito_achter\\Normal")

    empty_def("Dataset\\Cito_voor\\Ratio")
    empty_def("Dataset\\Cito_achter\\Ratio")
    empty_def("Dataset\\Mito_voor\\Ratio")
    empty_def("Dataset\\Mito_achter\\Ratio")
    empty_def("Dataset\\Cito_voor\\Difference")
    empty_def("Dataset\\Cito_achter\\Difference")
    empty_def("Dataset\\Mito_voor\\Difference")
    empty_def("Dataset\\Mito_achter\\Difference")

    empty_def("Dataset\\Grids")

    for filename in glob.glob('Dataset/Compleet/*.png'):
        im = Image.open(filename)
        case_id = filename.split("\\")
        filename = case_id[1].strip(".png")

        cito_voor(filename, im)
        cito_achter(filename, im)
        mito_voor(filename, im)
        mito_achter(filename, im)

        cito_achter_ratio(filename, im)
        cito_voor_ratio(filename, im)
        mito_achter_ratio(filename, im)
        mito_voor_ratio(filename, im)

    make_grid("Cito_voor", ["Tumor", "Normal"])
    make_grid("Cito_achter", ["Tumor", "Normal"])
    make_grid("Mito_voor", ["Tumor", "Normal"])
    make_grid("Mito_achter", ["Tumor", "Normal"])

    make_grid("Cito_voor", ["Difference", "Ratio"])
    make_grid("Cito_achter", ["Difference", "Ratio"])
    make_grid("Mito_voor", ["Difference", "Ratio"])
    make_grid("Mito_achter", ["Difference", "Ratio"])


def cito_voor(filename, im):
    """
    Function splices the front side of the citplasmic ribosome out of the complete screenshot, and saves it to the appropriate directory.
    :param filename: filename corresponding to the image being spliced.
    :param im: complete screenshot
    """
    section = 'cito_voor'
    left = 33
    top = 330
    right = 945
    bottom = 750

    # Cropped image of above dimension
    # (It will not change orginal image)
    im1 = im.crop((left, top, right, bottom))

    im1.save("Dataset\\Cito_voor\\Duo\\" + filename + "_" + section + ".png", 'PNG')

    dir = "Cito_voor"
    datatype1 = "Tumor"
    datatype2 = "Normal"
    split_duo(im1, filename, dir, datatype1, datatype2)


def cito_achter(filename, im):
    """
    Function splices the back side of the citplasmic ribosome out of the complete screenshot, and saves it to the appropriate directory.
    :param filename: filename corresponding to the image being spliced.
    :param im: complete screenshot
    """
    section = 'cito_achter'
    left = 33
    top = 750
    right = 945
    bottom = 1150

    # Cropped image of above dimension
    # (It will not change orginal image)
    im1 = im.crop((left, top, right, bottom))

    im1.save(
        "Dataset\\Cito_achter\\Duo\\" + filename + "_" + section + ".png",
        'PNG')

    dir = "Cito_achter"
    datatype1 = "Tumor"
    datatype2 = "Normal"
    split_duo(im1, filename, dir, datatype1, datatype2)


def mito_voor(filename, im):
    """
    Function splices the front side of the mitochondrial ribosome out of the complete screenshot, and saves it to the appropriate directory.
    :param filename: filename corresponding to the image being spliced.
    :param im: complete screenshot
    """
    section = 'mito_voor'
    left = 33
    top = 1150
    right = 945
    bottom = 1580

    im1 = im.crop((left, top, right, bottom))

    im1.save(
        "Dataset\\Mito_voor\\Duo\\" + filename + "_" + section + ".png",
        'PNG')

    dir = "Mito_voor"
    datatype1 = "Tumor"
    datatype2 = "Normal"
    split_duo(im1, filename, dir, datatype1, datatype2)


def mito_achter(filename, im):
    """
    Function splices the back side of the mitochondrial ribosome out of the complete screenshot, and saves it to the appropriate directory.
    :param filename: filename corresponding to the image being spliced.
    :param im: complete screenshot
    """
    section = 'mito_achter'
    left = 33
    top = 1580
    right = 945
    bottom = 2000

    im1 = im.crop((left, top, right, bottom))

    im1.save(
        "Dataset\\Mito_achter\\Duo\\" + filename + "_" + section + ".png",
        'PNG')

    dir = "Mito_achter"
    datatype1 = "Tumor"
    datatype2 = "Normal"
    split_duo(im1, filename, dir, datatype1, datatype2)


def cito_voor_ratio(filename, im):
    """
    Function splices the front side of the ratio and difference of the citplasmic ribosome out of the complete screenshot, and saves it to the appropriate directory.
    :param filename: filename corresponding to the image being spliced.
    :param im: complete screenshot
    """
    section = 'cito_voor_ratio'
    left = 1000
    top = 330
    right = 1945
    bottom = 770

    # Cropped image of above dimension
    # (It will not change orginal image)
    im1 = im.crop((left, top, right, bottom))

    im1.save(
        "Dataset\\Cito_Voor\\RatioDifference\\" + filename + "_" + section + ".png",
        'PNG')

    dir = "Cito_voor"
    datatype1 = "Difference"
    datatype2 = "Ratio"
    split_duo(im1, filename, dir, datatype1, datatype2)


def cito_achter_ratio(filename, im):
    """
    Function splices the back side of the ratio and difference of the citplasmic ribosome out of the complete screenshot, and saves it to the appropriate directory.
    :param filename: filename corresponding to the image being spliced.
    :param im: complete screenshot
    """
    section = 'cito_achter_ratio'
    left = 1000
    top = 770
    right = 1945
    bottom = 1170

    im1 = im.crop((left, top, right, bottom))

    im1.save(
        "Dataset\\Cito_achter\\RatioDifference\\" + filename + "_" + section + ".png",
        'PNG')

    dir = "Cito_achter"
    datatype1 = "Difference"
    datatype2 = "Ratio"
    split_duo(im1, filename, dir, datatype1, datatype2)


def mito_voor_ratio(filename, im):
    """
    Function splices the front side of the ratio and difference of the mitochondrial ribosome out of the complete screenshot, and saves it to the appropriate directory.
    :param filename: filename corresponding to the image being spliced.
    :param im: complete screenshot
    """
    section = 'mito_voor_ratio'
    left = 1000
    top = 1170
    right = 1945
    bottom = 1580

    # Cropped image of above dimension
    # (It will not change orginal image)
    im1 = im.crop((left, top, right, bottom))

    im1.save(
        "Dataset\\Mito_voor\\RatioDifference\\" + filename + "_" + section + ".png",
        'PNG')

    dir = "Mito_voor"
    datatype1 = "Difference"
    datatype2 = "Ratio"
    split_duo(im1, filename, dir, datatype1, datatype2)


def mito_achter_ratio(filename, im):
    """
    Function splices the back side of the ratio of the mitochondrial ribosome out of the complete screenshot, and saves it to the appropriate directory.
    :param filename: filename corresponding to the image being spliced.
    :param im: complete screenshot
    """
    section = 'mito_voor_ratio'
    left = 1000
    top = 1580
    right = 1945
    bottom = 2000

    # Cropped image of above dimension
    # (It will not change orginal image)
    im1 = im.crop((left, top, right, bottom))

    im1.save(
        "Dataset\\Mito_achter\\RatioDifference\\" + filename + "_" + section + ".png",
        'PNG')

    dir = "Mito_achter"
    datatype1 = "Difference"
    datatype2 = "Ratio"
    split_duo(im1, filename, dir, datatype1, datatype2)


def split_duo(im1, filename, dir, datatype1, datatype2):
    """
    Splits the earlier spliced duo into seperate images
    :param im1: 'Duo'Image
    :param filename: filename corresponding to the image being spliced.
    :param dir: Name of directory where the dir is saved to
    :param datatype1: Indicate which part of the 'duo' image is saved. Part of the final filename
    :param datatype2:  Indicate which part of the 'duo' image is saved. Part of the final filename
    """
    # Right side of the Image
    left = 480
    top = 0
    right = 900
    bottom = 400

    im = im1.crop((left, top, right, bottom))

    im.save(
        "Dataset\\" + dir + "\\" + datatype1 + "\\" + filename + "_" + dir + "_" + datatype1 + ".png",
        'PNG')

    # Left side of the Image
    left = 0
    top = 0
    right = 450
    bottom = 400

    im = im1.crop((left, top, right, bottom))

    im.save(
        "Dataset\\" + dir + "\\" + datatype2 + "\\" + filename + "_" + dir + "_" + datatype2 + ".png",
        'PNG')


def make_grid(location, dataypes):
    """
    Makes a grid of all the available images. One for each type of image.
    :param location: Indicates which part of the ribosomes the image is of.
    :param dataypes: List with Strings, Indicates whether the grid is of the Ratio, Difference, Tumor and Normal
    """
    for datatype in dataypes:

        PATH = r"Dataset\'" + location.strip("\\") + "\\" + datatype

        frame_width = 2000
        images_per_row = 5
        padding = 2

        images = []

        # f = open("C:\\Users\\braml\\Desktop\\Blok10\\ARC\\Dataset_Bot\\venv\\Scripts\\Dataset\\Cito_voor\\Tumor\\C3L-00001_Cito_voor_Tumor.png")
        for filename in glob.glob(
                "C:\\Users\\braml\\Desktop\\Blok10\\ARC\\Dataset_Bot\\venv\\Scripts\\Dataset\\" + location + "\\" + datatype + "\\*.png"):
            images.append(filename)

        img_width, img_height = Image.open(images[0]).size
        sf = (frame_width - (images_per_row - 1) * padding) / (images_per_row * img_width)  # scaling factor
        scaled_img_width = ceil(img_width * sf)  # s
        scaled_img_height = ceil(img_height * sf)

        number_of_rows = ceil(len(images) / images_per_row)
        frame_height = ceil(sf * img_height * number_of_rows)

        new_im = Image.new('RGB', (frame_width, frame_height))

        i, j = 0, 0
        for num, im in enumerate(images):
            if num % images_per_row == 0:
                i = 0
            im = Image.open(im)
            # Here I resize my opened image, so it is no bigger than 100,100
            im.thumbnail((scaled_img_width, scaled_img_height))
            # Iterate through a 4 by 4 grid with 100 spacing, to place my image
            y_cord = (j // images_per_row) * scaled_img_height
            new_im.paste(im, (i, y_cord))
            # print(i, y_cord)
            i = (i + scaled_img_width) + padding
            j += 1

        new_im.save(
            r"C:\Users\braml\Desktop\Blok10\ARC\Dataset_Bot\venv\Scripts\Dataset\Grids\\" + location + "_" + datatype + ".png",
            "PNG", quality=100, optimize=True, progressive=True)


def empty_def(folder):
    """
    Empties directory to avoid contamination.
    :param folder: path to directory
    """
    for filename in os.listdir(folder):
        file_path = os.path.join(folder, filename)
        try:
            if os.path.isfile(file_path) or os.path.islink(file_path):
                os.unlink(file_path)
            elif os.path.isdir(file_path):
                shutil.rmtree(file_path)
        except Exception as e:
            print('Failed to delete %s. Reason: %s' % (file_path, e))


main()
